# django
from django.utils.translation import gettext_lazy as _

# rest framework
from rest_framework import serializers
from rest_framework.validators import UniqueTogetherValidator

# models
from .models import Grade
from schools.models import School

# serializers
from subjects.serializers import SubjectsSerializer


class GradeCreationSerializer(serializers.ModelSerializer):

    # explicitly declaring the field since its set as editable=False in the model, 
    # specifying that a field should not be included in forms autogenerated from the model. This includes the admin site and serializers in Django Rest Framework
    grade = serializers.CharField(max_length=4) 
    school = serializers.PrimaryKeyRelatedField(queryset=School.objects.all())

    class Meta:
        model = Grade
        fields = ['major_subjects', 'none_major_subjects', 'grade', 'school']

    def __init__(self, *args, **kwargs):
        super(GradeCreationSerializer, self).__init__(*args, **kwargs)
        # Remove the unique together validator that's added by DRF
        self.validators = [v for v in self.validators if not isinstance(v, UniqueTogetherValidator)]


class UpdateGradeSerializer(serializers.ModelSerializer):

    class Meta:
        model = Grade
        fields = ['major_subjects', 'none_major_subjects']

    def __init__(self, *args, **kwargs):
        super(UpdateGradeSerializer, self).__init__(*args, **kwargs)
        # Remove the unique together validator that's added by DRF
        self.validators = [v for v in self.validators if not isinstance(v, UniqueTogetherValidator)]
        # Set all fields to be optional by making them not required
        for field in self.fields:
            self.fields[field].required = False


class GradesSerializer(serializers.ModelSerializer):
    
    class Meta:
        model = Grade
        fields = ['grade', 'grade_id', 'student_count', 'last_updated']


class GradeSerializer(serializers.ModelSerializer):
    
    subjects = serializers.SerializerMethodField()

    class Meta:
        model = Grade
        fields = ['subjects']

    def get_subjects(self, obj):
        return SubjectsSerializer(obj.subjects.all(), many=True).data


class GradeDetailsSerializer(serializers.ModelSerializer):

    class Meta:
        model = Grade
        fields = ['major_subjects', 'none_major_subjects', 'student_count']



